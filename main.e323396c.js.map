{"version":3,"sources":["src/scenes/LoadScene.js","src/scenes/MenuScene.js","src/Player.js","src/scenes/LevelA.js","src/main.js"],"names":["Scene","LoadScene","key","Phaser","load","audio","image","spritesheet","frameHeight","frameWidth","bitmapFont","loadingBar","add","graphics","fillStyle","color","on","percent","fillRect","game","renderer","height","width","scene","start","MenuScene","sound","pauseOnBlur","music","loop","sky","tileSprite","setOrigin","setDepth","setScale","soundButton","playMusic","setInteractive","setTexture","play","stop","playButton","tilePositionX","Sprite","Player","x","y","playerIsWitch","anims","create","frames","generateFrameNumbers","end","frameRate","repeat","sys","updateList","displayList","physics","world","enableBody","setDrag","setMaxVelocity","setSize","Input","Keyboard","KeyCodes","LEFT","RIGHT","UP","W","A","D","X","keys","input","keyboard","addKeys","left","right","up","w","a","d","cameras","main","setBounds","map","widthInPixels","heightInPixels","startFollow","LBtn","setScrollFactor","setAlpha","RBtn","setFlipX","JBtn","setAngle","LTouched","RTouched","JTouched","Physics","Arcade","onGround","body","touching","down","blocked","cursors","createCursorKeys","isDown","setAccelerationX","jumps","allowedToJump","setVelocityY","velocity","LevelA","tilemapTiledJSON","addPointer","setBackgroundColor","tilemap","terrain2","addTilesetImage","terrain3","grLayer","createDynamicLayer","bgLayer","createStaticLayer","scrollFactorX","platformGroup","group","j","Platform","findObject","obj","name","platform","setAllowGravity","setImmovable","tweens","timeline","targets","properties","value","duration","ease","checkPointList","filterObjects","includes","forEach","checkPoint","setTileLocationCallback","spawnPoint","putTileAtWorldXY","player","collider","setCollisionByProperty","collides","spikeGroup","staticGroup","forEachTile","tile","index","getCenterX","getCenterY","spike","rotation","angle","setOffset","removeTileAt","textList","bitmapText","text","setCenterAlign","isPlayerDead","time","delta","update","overlap","setVelocity","setAcceleration","cam","shake","once","Game","parent","render","pixelArt","default","arcade","gravity","debug","scale","mode","Scale","FIT","autoCenter","CENTER_BOTH"],"mappings":"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","file":"main.e323396c.js","sourceRoot":"..","sourcesContent":["/**@type {import(\"../typings/phaser\")} */\r\n\r\nexport class LoadScene extends Phaser.Scene{\r\n    constructor(){\r\n        super({ key: 'LoadScene' })\r\n    }\r\n    init(){\r\n    }\r\n\r\n    preload(){\r\n        this.load.audio(\"music\", \"./assets/audio/music.mp3\");\r\n        this.load.audio(\"death_sfx\", \"./assets/audio/death2.wav\");\r\n        this.load.image('play_button', './assets/images/play_button.png');\r\n        this.load.image('sound_on', './assets/images/sound_on.png');\r\n        this.load.image('sound_off', './assets/images/sound_off.png');\r\n        this.load.image('title', './assets/images/font3.png');\r\n        this.load.image('sky_bg', './assets/images/background_evening.png');\r\n        this.load.image('control_button', './assets/images/arrow.png'); \r\n        this.load.spritesheet('ghost', './assets/sprites/witch_sprite.png', { frameHeight: 24, frameWidth: 24});\r\n        this.load.spritesheet('witch', './assets/sprites/witch_sprite_2.png', { frameHeight: 24, frameWidth: 24});\r\n        //this.load.image('hat', './assets/images/witch_hat2.png');\r\n        this.load.bitmapFont('8bit_font', './assets/fonts/font0.png', './assets/fonts/font0.fnt');\r\n        this.load.image('spike', './assets/images/spike.png');\r\n        this.load.image('spike_ball', './assets/images/spike_ball.png');\r\n        this.load.image('spike_ball2', './assets/images/spike_ball2.png');\r\n        this.load.image('platform', './assets/images/platform.png');\r\n        this.load.image('terrain2', './assets/images/witch_tiles.png');\r\n        this.load.image('terrain3', './assets/images/industrial.png');\r\n\r\n\r\n        let loadingBar = this.add.graphics({\r\n            fillStyle: {\r\n                color: 0xffffff //white\r\n            }\r\n        });\r\n\r\n        /** simulate large load\r\n         for(let i = 0; i < 100; i++){\r\n             this.load.spritesheet(\"cat\" + i, \".assets/cat.png\", {\r\n                 frameHeight: 32,\r\n                 frameWidth: 32\r\n             });\r\n         }\r\n        */\r\n        \r\n        this.load.on(\"progress\", (percent) => {\r\n            loadingBar.fillRect(0, this.game.renderer.height / 2, this.game.renderer.width * percent, 10);\r\n        })\r\n\r\n        this.load.on(\"complete\", ()=>{\r\n            this.scene.start('MenuScene');\r\n        })\r\n    }\r\n\r\n    create(){\r\n    }\r\n}","/**@type {import(\"../typings/phaser\")} */\r\n\r\nexport class MenuScene extends Phaser.Scene{\r\n    constructor(){\r\n        super({ key: 'MenuScene' })\r\n    }\r\n    preload(){\r\n    }\r\n\r\n    create(){\r\n        //music\r\n        this.sound.pauseOnBlur = true;\r\n        this.music = this.sound.add(\"music\", {\r\n            loop: true\r\n        });\r\n\r\n\r\n        //background\r\n        this.sky = this.add.tileSprite(0, 0, 0, 0, 'sky_bg').setOrigin(0,0).setDepth(-2);;\r\n        \r\n        //text & buttons\r\n        let title = this.add.image(320, 130, 'title').setScale(1.7);\r\n        this.soundButton = this.add.image(600, 40, 'sound_off').setScale(0.3);\r\n        this.playMusic = false;\r\n        this.soundButton.setInteractive();\r\n        this.soundButton.on(\"pointerup\", () => {\r\n            if (this.playMusic !== true){\r\n                this.soundButton.setTexture('sound_on');\r\n                this.music.play();\r\n                this.playMusic = true;\r\n            } else {\r\n                this.soundButton.setTexture('sound_off');\r\n                this.music.stop();\r\n                this.playMusic = false;\r\n            }\r\n        })\r\n        \r\n    \r\n        let playButton = this.add.image(320, 300, 'play_button').setScale(1.3);\r\n        playButton.setInteractive();\r\n        playButton.on(\"pointerup\", () => {\r\n            this.scene.start('LevelA');\r\n        })\r\n    }\r\n\r\n    update(){\r\n        this.sky.tilePositionX += 1;\r\n    }\r\n}","/**@type {import(\"../typings/phaser\")} */\r\n\r\nexport default class Player extends Phaser.Physics.Arcade.Sprite{\r\n    constructor(scene, x, y, playerIsWitch = false){\r\n        super(scene, x, y, 'ghost', 0);\r\n        this.scene = scene;\r\n        const anims = scene.anims;\r\n\r\n        //animations 'this.scene.anims'\r\n        anims.create({\r\n            key: 'ghost_run',\r\n            frames: anims.generateFrameNumbers('ghost', { start: 0, end: 3 }),\r\n            frameRate: 8,\r\n            repeat: -1\r\n        });\r\n        //the jump animation is only th 5 frame and should be activated in air\r\n        anims.create({\r\n            key: 'ghost_wand',\r\n            frames: anims.generateFrameNumbers('ghost', { start: 6, end: 9 }),\r\n            frameRate: 4,\r\n            repeat: -1\r\n        });\r\n        anims.create({\r\n            key: 'witch_run',\r\n            frames: anims.generateFrameNumbers('witch', { start: 0, end: 3 }),\r\n            frameRate: 8,\r\n            repeat: -1\r\n        });\r\n        anims.create({\r\n            key: 'witch_wand',\r\n            frames: anims.generateFrameNumbers('witch', { start: 6, end: 9 }),\r\n            frameRate: 4,\r\n            repeat: -1\r\n        });\r\n        anims.create({\r\n            key: 'ghost_die',\r\n            frames: anims.generateFrameNumbers('ghost', { start: 17, end: 20 }),\r\n            frameRate: 8,\r\n            repeat: 0\r\n        });\r\n        anims.create({\r\n            key: 'witch_die',\r\n            frames: anims.generateFrameNumbers('witch', { start: 17, end: 20 }),\r\n            frameRate: 8,\r\n            repeat: 0\r\n        });\r\n\r\n        //no idea what for, seems o work w/out the first\r\n        scene.sys.updateList.add(this);\r\n        scene.sys.displayList.add(this);\r\n        scene.physics.world.enableBody(this);\r\n\r\n        //create player\r\n        this.setDrag(2000, 0)\r\n            .setMaxVelocity(350, 660)\r\n            .setSize(8, 16)\r\n            .setDepth(1)\r\n            .setInteractive()\r\n            .setScale(2);\r\n\r\n        // Track the arrow keys & WASD\r\n        const { LEFT, RIGHT, UP, W, A, D, X} = Phaser.Input.Keyboard.KeyCodes;\r\n        this.keys = scene.input.keyboard.addKeys({\r\n            left: LEFT,\r\n            right: RIGHT,\r\n            up: UP,\r\n            w: W,\r\n            a: A,\r\n            d: D,\r\n            x: X\r\n        });\r\n\r\n        //camera\r\n        scene.cameras.main.setBounds(0, 0, scene.map.widthInPixels*2, scene.map.heightInPixels*2);\r\n        scene.cameras.main.startFollow(this, true, 0.1, 1, -50);\r\n        scene.physics.world.setBounds(0,0,scene.map.widthInPixels*2, scene.map.heightInPixels*2);\r\n\r\n\r\n        //is it with hat?\r\n        this.playerIsWitch = playerIsWitch;\r\n\r\n\r\n        //create buttons\r\n        let LBtn = scene.add.image(60, 300, 'control_button').setScale(0.6).setScrollFactor(0, 0).setInteractive().setDepth(3).setAlpha(0.5);\r\n        let RBtn = scene.add.image(160, 300, 'control_button').setScale(0.6).setScrollFactor(0, 0).setFlipX(true).setInteractive().setDepth(3).setAlpha(0.5);\r\n        let JBtn = scene.add.image(560, 300, 'control_button').setScale(0.6).setScrollFactor(0, 0).setAngle(90).setInteractive().setDepth(3).setAlpha(0.5);\r\n    \r\n        // using control variable this.btnTouched \r\n        LBtn.on('pointerdown', ()=> {this.LTouched = true; LBtn.setAlpha(1)});\r\n        LBtn.on('pointerup', () => {this.LTouched = false; LBtn.setAlpha(0.5)});\r\n        RBtn.on('pointerdown', ()=> {this.RTouched = true; RBtn.setAlpha(1)});\r\n        RBtn.on('pointerup', () => {this.RTouched = false; RBtn.setAlpha(0.5)});\r\n        JBtn.on('pointerdown', ()=> {this.JTouched = true; JBtn.setAlpha(1)});\r\n        JBtn.on('pointerup', () => {this.JTouched = false; JBtn.setAlpha(0.5)});\r\n    }\r\n    update(){\r\n        const onGround = this.body.touching.down || this.body.blocked.down; //might fail if added collectible stuff like coins\r\n        const vel = 350;\r\n        const jumpVelocity = -580;\r\n        const levitationVelocity = -400;\r\n        const acceleration = 2000;\r\n\r\n        //move on keypress\r\n        let cursors = this.scene.input.keyboard.createCursorKeys();\r\n        if (cursors.left.isDown || this.LTouched){\r\n            this.setAccelerationX(-acceleration);\r\n            this.setFlipX(true);\r\n        } else if (cursors.right.isDown || this.RTouched){\r\n            this.setAccelerationX(acceleration);\r\n            this.setFlipX(false);\r\n        } else {\r\n            this.setAccelerationX(0);\r\n        }\r\n\r\n\r\n        //jumping\r\n        if (onGround){\r\n            this.jumps = 1;\r\n            this.allowedToJump = false;\r\n        }\r\n        if (cursors.up.isDown && onGround || this.JTouched && onGround){\r\n            this.setVelocityY(jumpVelocity)\r\n        }\r\n        //allow to jump in air\r\n        if (!cursors.up.isDown &&  !this.JTouched && !onGround){\r\n            this.allowedToJump = true;\r\n        }\r\n        //jump in air if allowed\r\n        if ((cursors.up.isDown || this.JTouched) && \r\n        !onGround  && this.allowedToJump && this.jumps > 0){\r\n            this.setVelocityY(jumpVelocity);\r\n            this.jumps--;\r\n            this.allowedToJump = false;\r\n        }\r\n    \r\n        //create animations\r\n        if (onGround){\r\n            if (this.playerIsWitch == false){        //if on ground and is ghost\r\n                if (this.body.velocity.x !== 0) {\r\n                    this.anims.play('ghost_run', true);\r\n                } else {\r\n                    this.setTexture('ghost', 0);\r\n                }\r\n            } else {                            //if on ground and is witch\r\n                if (this.body.velocity.x !== 0) {\r\n                    this.anims.play('witch_run', true);\r\n                } else {\r\n                    this.setTexture('witch', 0);\r\n                }\r\n            }\r\n        } else if (this.playerIsWitch == false){      //if in air and is ghost\r\n            this.setTexture('ghost', 5)\r\n        } else {                                //if in air and is witch\r\n            this.setTexture('witch', 5)\r\n        }\r\n\r\n        //levitate\r\n        if (this.keys.x.isDown) {\r\n            this.setVelocityY(levitationVelocity);\r\n          }\r\n    }\r\n}\r\n","/**@type {import(\"../typings/phaser\")} */\r\nimport Player from '../Player.js';\r\n\r\nexport class LevelA extends Phaser.Scene {\r\n    constructor() {\r\n        super({ key: 'LevelA' })\r\n    }\r\n    preload(){\r\n        this.load.tilemapTiledJSON('map3', './assets/maps/map4.json');\r\n    }\r\n    create(){\r\n        this.game.input.addPointer();\r\n        //create map\r\n        this.cameras.main.setBackgroundColor(0x19081b);\r\n        this.map = this.add.tilemap('map3');\r\n        let terrain2 = this.map.addTilesetImage('witch_tiles', 'terrain2');\r\n        let terrain3 = this.map.addTilesetImage('industrial', 'terrain3');\r\n        this.grLayer = this.map.createDynamicLayer('Ground', [ terrain3, terrain2], 0, 0).setDepth(0).setScale(2);\r\n        this.bgLayer = this.map.createStaticLayer('Background', [terrain3, terrain2], 0, 0).setDepth(-1).setScale(2);\r\n\r\n        this.sky = this.add.tileSprite(0, 0, this.map.widthInPixels*4, this.map.heightInPixels*2, 'sky_bg').setOrigin(0,0).setDepth(-2);\r\n        this.sky.scrollFactorX = (0.2);\r\n\r\n        //moving platforms (the object in tiled must contain 'latform')\r\n        // first: the x speed\r\n        //second: the y speed\r\n\r\n        this.platformGroup= this.physics.add.group();\r\n        let j = 0\r\n        while (true){\r\n            this.Platform = this.map.findObject('Objects', obj => obj.name === 'Platform'+j);\r\n            if (this.Platform != null){\r\n                this.platform = this.physics.add.image(this.Platform.x, this.Platform.y, 'platform').setScale(0.2);\r\n                this.platformGroup.add(this.platform);\r\n                this.platform.body.setAllowGravity(false);\r\n                this.platform.body.setImmovable(true);\r\n                this.tweens.timeline({\r\n                    targets: this.platform.body.velocity,\r\n                    loop: -1,\r\n                    tweens: [\r\n                        //first property: duration, second: speed x, third: speed y\r\n                        {x: this.Platform.properties[1].value, y: this.Platform.properties[2].value,  duration: this.Platform.properties[0].value, ease: 'Stepped'}   ,\r\n                        {x: -this.Platform.properties[1].value, y: -this.Platform.properties[2].value,  duration: this.Platform.properties[0].value, ease: 'Stepped'}\r\n                    ]\r\n                });\r\n                j++\r\n            } else break;\r\n        };\r\n\r\n\r\n        //spike ball\r\n        /*\r\n        this.add.image(100, 100, 'spike_ball');\r\n        this.spikeBall = this.physics.add.image(200, 100, 'spike_ball2');\r\n        this.spikeBall.body.setAllowGravity(false);\r\n        this.spikeBall.setOrigin(0.47, 0.02);\r\n        this.spikeBall.setRotation(0.6);\r\n        */\r\n        \r\n\r\n        //find alll check points\r\n        this.checkPointList = this.map.filterObjects('Objects', obj => obj.name.includes('heck'));\r\n\r\n        //set collision callback for every check point\r\n        this.checkPointList.forEach((checkPoint) => {\r\n            this.grLayer.setTileLocationCallback(checkPoint.x/16, checkPoint.y/16, 2, 2, () => {\r\n                this.spawnPoint = checkPoint;\r\n                //draw the red sign\r\n                this.grLayer.putTileAtWorldXY(385, checkPoint.x*2, checkPoint.y*2);    \r\n                this.grLayer.putTileAtWorldXY(386, checkPoint.x*2+32, checkPoint.y*2);  \r\n                this.grLayer.putTileAtWorldXY(417, checkPoint.x*2, checkPoint.y*2+32);  \r\n                this.grLayer.putTileAtWorldXY(418, checkPoint.x*2+32, checkPoint.y*2+32);   \r\n    \r\n            }, this)\r\n        })\r\n\r\n            //this.checkPointCurrent = 0;\r\n        //set spawn point\r\n        this.spawnPoint = this.map.findObject('Objects', obj => obj.name === 'Spawn Point');\r\n    \r\n        //create player\r\n        this.player = new Player(this, this.spawnPoint.x*2, this.spawnPoint.y*2-14, true); //if last is true - give hat\r\n    \r\n    \r\n        //collisions\r\n        this.physics.add.collider(this.player, this.grLayer);\r\n        this.physics.add.collider(this.player, this.bgLayer);\r\n        this.physics.add.collider(this.player, this.platformGroup);\r\n        this.grLayer.setCollisionByProperty({collides:true});\r\n\r\n\r\n        //SPIKES\r\n        // Create a physics group - useful for colliding the player against all the spikes\r\n        this.spikeGroup = this.physics.add.staticGroup();\r\n\r\n        // Loop over each Tile and replace spikes (tile index 101) with custom sprites\r\n        this.grLayer.forEachTile(tile => {\r\n            if (tile.index === 101) {\r\n                // A sprite has its origin at the center, so place the sprite at the center of the tile\r\n                const x = tile.getCenterX();\r\n                const y = tile.getCenterY();\r\n                const spike = this.spikeGroup.create(x+8, y+8, \"spike\").setScale(2);\r\n\r\n                // The map has spike tiles that have been rotated in Tiled (\"z\" key), so parse out that angle\r\n                // to the correct body placement\r\n                spike.rotation = tile.rotation;\r\n                if (spike.angle === 0) spike.body.setSize(30, 6).setOffset(-6, 17);\r\n                else if (spike.angle === -90) spike.body.setSize(6, 30).setOffset(18, -8);\r\n                else if (spike.angle === 90) spike.body.setSize(6, 30).setOffset(-8, -6);\r\n                else spike.body.setSize(30, 6).setOffset(-8, -9);\r\n\r\n                // And lastly, remove the spike tile from the layer\r\n                this.grLayer.removeTileAt(tile.x, tile.y);\r\n            }\r\n        });\r\n\r\n\r\n        //test bullet or sorta\r\n        /*\r\n        this.player.on('pointerup', ()=> {\r\n            this.bullet = this.physics.add.sprite(this.player.x, this.player.y, 'ghost', 0);\r\n            this.bullet.body.setAllowGravity(false);\r\n            this.bullet.setVelocityX(300);\r\n        });\r\n        */\r\n\r\n        //text\r\n        this.textList = this.map.filterObjects('Objects', obj => obj.name.includes('ext'));\r\n        this.textList.forEach((obj)=> {\r\n            this.add.bitmapText(obj.x*2, obj.y*2, '8bit_font', obj.text.text, 36).setCenterAlign().setDepth(-1);\r\n        });\r\n\r\n        //smaller text for robot\r\n        this.textList = this.map.filterObjects('Objects', obj => obj.name.includes('robo'));\r\n        this.textList.forEach((obj)=> {\r\n            this.add.bitmapText(obj.x*2, obj.y*2, '8bit_font', obj.text.text, 18).setCenterAlign().setDepth(-1);\r\n        });\r\n        //it just has to be here\r\n        this.isPlayerDead = false;\r\n    }\r\n    \r\n    update(time, delta){\r\n        if (this.isPlayerDead) return;\r\n        //this.spikeBall.angle -= 3;\r\n        this.player.update();\r\n\r\n        //if dead\r\n        if (this.player.y > this.grLayer.height*2 + 10 || \r\n        this.physics.world.overlap(this.player, this.spikeGroup)) {\r\n            this.isPlayerDead = true;\r\n            this.sound.play(\"death_sfx\", {loop: false});\r\n            this.player.setVelocity(0);\r\n            this.player.setAcceleration(0);\r\n            this.player.body.setAllowGravity(false);\r\n            this.player.anims.play('witch_die', true);\r\n            \r\n            //shake camera\r\n            const cam = this.cameras.main;\r\n            cam.shake(300, 0.05);\r\n\r\n            cam.once('camerashakecomplete', ()=> {\r\n                    this.player.x = this.spawnPoint.x*2;\r\n                    this.player.y = this.spawnPoint.y*2-14;\r\n                    this.isPlayerDead = false;\r\n                    this.player.update();            \r\n                    this.player.body.setAllowGravity(true);\r\n            })\r\n        }\r\n    };\r\n}","/**@type {import(\"../typings/phaser\")} */\r\nimport { LoadScene } from './scenes/LoadScene';\r\nimport {MenuScene} from './scenes/MenuScene';\r\nimport {LevelA} from './scenes/LevelA';\r\n\r\nlet game = new Phaser.Game({\r\n    width: 640,\r\n    height: 360,\r\n    parent: 'witches-can-t-cry',\r\n    scene: [\r\n        LoadScene,\r\n        MenuScene,\r\n        LevelA\r\n    ],\r\n    render: { pixelArt: true},\r\n    physics: {\r\n        default: \"arcade\",\r\n        arcade: {\r\n            gravity: {y: 1600},\r\n            debug: false\r\n        }\r\n    },\r\n    scale: {\r\n        mode: Phaser.Scale.FIT,\r\n        autoCenter: Phaser.Scale.CENTER_BOTH,\r\n    }\r\n});\r\n\r\n//for posting on github:\r\n/*\r\ngit init\r\n\r\ngit remote add origin https://github.com/Kyle-is-online/(repo-name).git (if first time)\r\n\r\ngit add .\r\ngit commit -m 'dist'\r\ngit push -u origin master\r\n(login)\r\n*/\r\n\r\n"]}