{"version":3,"sources":["src/scenes/MenuScene.js","src/Player.js","src/scenes/LevelA.js","src/scenes/LevelB.js","src/scenes/LevelC.js","src/main.js"],"names":["Scene","MenuScene","key","Phaser","load","image","audio","sound","pauseOnBlur","music","add","loop","stars_bg","tileSprite","setOrigin","setDepth","game","renderer","width","height","soundButton","setScale","playMusic","setInteractive","on","setTexture","play","stop","playButton","scene","start","tilePositionX","Sprite","Player","x","y","playerIsWitch","anims","create","frames","generateFrameNumbers","end","frameRate","repeat","sys","updateList","displayList","physics","world","enableBody","setDrag","setMaxVelocity","setSize","Input","Keyboard","KeyCodes","LEFT","RIGHT","UP","W","A","D","X","keys","input","keyboard","addKeys","left","right","up","w","a","d","cameras","main","setBounds","map","widthInPixels","heightInPixels","startFollow","LBtn","setScrollFactor","RBtn","setFlipX","JBtn","setAngle","moveIt","Physics","Arcade","onGround","body","blocked","down","cursors","createCursorKeys","isDown","setAccelerationX","setVelocityY","velocity","LevelA","spritesheet","frameHeight","frameWidth","tilemapTiledJSON","tilemap","terrain","addTilesetImage","skyLayer","createStaticLayer","bgLayer","grLayer","spawnPoint","findObject","obj","name","hatPoint","hat","player","collider","setCollisionByProperty","collides","overlap","text1","console","log","text","font","fill","time","delta","update","destroy","restart","LevelB","bitmapFont","terrain2","terrain3","setTileIndexCallback","bullet","sprite","setAllowGravity","setVelocityX","sign","bitmapText","type","sign2","LevelC","createDynamicLayer","spikeGroup","staticGroup","forEachTile","tile","index","getCenterX","getCenterY","spike","rotation","angle","setOffset","removeTileAt","Game","parent","render","pixelArt","default","arcade","gravity","debug","scale","mode","Scale","FIT","autoCenter","CENTER_BOTH"],"mappings":"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","file":"main.b2121eba.js","sourceRoot":"..","sourcesContent":["export class MenuScene extends Phaser.Scene{\r\n    constructor(){\r\n        super({ key: 'MenuScene' })\r\n    }\r\n    preload(){\r\n        this.load.image('play_button', './assets/images/play_button.png');\r\n        this.load.image('sound_on', './assets/images/sound_on.png');\r\n        this.load.image('sound_off', './assets/images/sound_off.png');\r\n        this.load.image('title', './assets/images/font3.png');\r\n        this.load.image('stars_bg', './assets/images/sky4.png');\r\n        this.load.audio(\"music\", \"./assets/audio/music.mp3\");\r\n        this.load.image('control_button', './assets/images/arrow.png')\r\n    }\r\n\r\n    create(){\r\n        \r\n        //music\r\n        this.sound.pauseOnBlur = true;\r\n        this.music = this.sound.add(\"music\", {\r\n            loop: true\r\n        });\r\n\r\n\r\n        //background\r\n        this.stars_bg = this.add.tileSprite(0, 0, 0, 0, 'stars_bg').setOrigin(0,0).setDepth(-2);\r\n        \r\n        //text & buttons\r\n        let title = this.add.image(this.game.renderer.width/2, this.game.renderer.height/2-50, 'title')\r\n        this.soundButton = this.add.image(280, 20, 'sound_off').setScale(0.2);\r\n        this.playMusic = false;\r\n        this.soundButton.setInteractive();\r\n        this.soundButton.on(\"pointerup\", () => {\r\n            if (this.playMusic !== true){\r\n                this.soundButton.setTexture('sound_on');\r\n                this.music.play();\r\n                this.playMusic = true;\r\n            } else {\r\n                this.soundButton.setTexture('sound_off');\r\n                this.music.stop();\r\n                this.playMusic = false;\r\n            }\r\n        })\r\n        \r\n        \r\n        let playButton = this.add.image(this.game.renderer.width/2, this.game.renderer.height/2+50, 'play_button')\r\n        playButton.setInteractive();\r\n        playButton.on(\"pointerup\", () => {\r\n            this.scene.start('LevelA');\r\n        })\r\n    }\r\n\r\n    update(){\r\n        this.stars_bg.tilePositionX += 1;\r\n        \r\n    }\r\n}","//import Phaser from 'phaser';\r\n\r\nexport default class Player extends Phaser.Physics.Arcade.Sprite{\r\n    constructor(scene, x, y, playerIsWitch = false){\r\n        super(scene, x, y, 'ghost', 0);\r\n        this.scene = scene;\r\n        const anims = scene.anims;\r\n\r\n        //animations 'this.scene.anims'\r\n        anims.create({\r\n            key: 'ghost_run',\r\n            frames: anims.generateFrameNumbers('ghost', { start: 0, end: 3 }),\r\n            frameRate: 8,\r\n            repeat: -1\r\n        });\r\n        //the jump animation is only th 5 frame and should be activated in air\r\n        anims.create({\r\n            key: 'ghost_wand',\r\n            frames: anims.generateFrameNumbers('ghost', { start: 6, end: 9 }),\r\n            frameRate: 4,\r\n            repeat: -1\r\n        });\r\n        anims.create({\r\n            key: 'witch_run',\r\n            frames: anims.generateFrameNumbers('witch', { start: 0, end: 3 }),\r\n            frameRate: 8,\r\n            repeat: -1\r\n        });\r\n        anims.create({\r\n            key: 'witch_wand',\r\n            frames: anims.generateFrameNumbers('witch', { start: 6, end: 9 }),\r\n            frameRate: 4,\r\n            repeat: -1\r\n        });\r\n\r\n        //no idea what for, seems o work w/out the first\r\n        scene.sys.updateList.add(this);\r\n        scene.sys.displayList.add(this);\r\n        scene.physics.world.enableBody(this);\r\n\r\n        //create player\r\n        this.setDrag(1000, 0)\r\n            .setMaxVelocity(200, 500)\r\n            .setSize(8, 16)\r\n            .setDepth(1)\r\n            .setInteractive();\r\n\r\n        // Track the arrow keys & WASD\r\n        const { LEFT, RIGHT, UP, W, A, D, X} = Phaser.Input.Keyboard.KeyCodes;\r\n        this.keys = scene.input.keyboard.addKeys({\r\n            left: LEFT,\r\n            right: RIGHT,\r\n            up: UP,\r\n            w: W,\r\n            a: A,\r\n            d: D,\r\n            x: X\r\n        });\r\n\r\n        //camera\r\n        scene.cameras.main.setBounds(0, 0, scene.map.widthInPixels, scene.map.heightInPixels);\r\n        scene.cameras.main.startFollow(this);\r\n        scene.physics.world.setBounds(0,0,scene.map.widthInPixels, scene.map.heightInPixels);\r\n\r\n\r\n        //is it with hat?\r\n        this.playerIsWitch = playerIsWitch;\r\n\r\n\r\n        //create buttons\r\n        let LBtn = scene.add.image(210, 220, 'control_button').setScale(0.3).setScrollFactor(0, 0).setInteractive();\r\n        let RBtn = scene.add.image(270, 220, 'control_button').setScale(0.3).setScrollFactor(0, 0).setFlipX(true).setInteractive();\r\n        let JBtn = scene.add.image(40, 220, 'control_button').setScale(0.3).setScrollFactor(0, 0).setAngle(90).setInteractive();\r\n    \r\n        \r\n        // using control variable this.moveIt \r\n        LBtn.on('pointerdown', ()=> this.moveIt = 'left');\r\n        LBtn.on('pointerup', () => this.moveIt = 'no');\r\n        RBtn.on('pointerdown', ()=> this.moveIt = 'right');\r\n        RBtn.on('pointerup', () => this.moveIt = 'no');\r\n        JBtn.on('pointerdown', ()=> this.moveIt = 'jump');\r\n        JBtn.on('pointerup', () => this.moveIt = 'no');\r\n    }\r\n    update(){\r\n        const onGround = this.body.blocked.down;\r\n        const acceleration = 700;\r\n        const keys = this.keys;\r\n    \r\n        //move on keypress\r\n        let cursors = this.scene.input.keyboard.createCursorKeys();\r\n        if (cursors.left.isDown || this.moveIt === 'left'){\r\n            this.setAccelerationX(-acceleration);\r\n            this.setFlipX(true);\r\n        } else if (cursors.right.isDown || this.moveIt === 'right'){\r\n            this.setAccelerationX(acceleration);\r\n            this.setFlipX(false);\r\n        } else {\r\n            this.setAccelerationX(0);\r\n        }\r\n        if (cursors.up.isDown && onGround || this.moveIt === 'jump' && onGround){\r\n            this.setVelocityY(-340)\r\n        }\r\n    \r\n        //create animation\r\n        if (onGround){\r\n            if (this.playerIsWitch == false){        //if on ground and is ghost\r\n                if (this.body.velocity.x !== 0) {\r\n                    this.anims.play('ghost_run', true);\r\n                } else {\r\n                    this.setTexture('ghost', 0);\r\n                }\r\n            } else {                            //if on ground and is witch\r\n                if (this.body.velocity.x !== 0) {\r\n                    this.anims.play('witch_run', true);\r\n                } else {\r\n                    this.setTexture('witch', 0);\r\n                }\r\n            }\r\n        } else if (this.playerIsWitch == false){      //if in air and is ghost\r\n            this.setTexture('ghost', 5)\r\n        } else {                                //if in air and is witch\r\n            this.setTexture('witch', 5)\r\n        }\r\n\r\n        //levitate\r\n        if (this.keys.x.isDown) {\r\n            this.setVelocityY(-200);\r\n          }\r\n    }\r\n}","/**@type {import(\"../typings/phaser\")} */\r\nimport Player from '../Player.js';\r\n\r\nexport class LevelA extends Phaser.Scene {\r\n    constructor() {\r\n        super({ key: 'LevelA' })\r\n    }\r\n    preload(){\r\n        this.load.spritesheet('ghost', './assets/sprites/witch_sprite.png', { frameHeight: 24, frameWidth: 24});\r\n        this.load.spritesheet('witch', './assets/sprites/witch_sprite_2.png', { frameHeight: 24, frameWidth: 24});\r\n        this.load.tilemapTiledJSON('map', './assets/maps/level1.json');\r\n        this.load.image('terrain', './assets/images/platformertiles_extruded.png');\r\n        this.load.image('hat', './assets/images/witch_hat2.png');\r\n    }\r\n    \r\n    create(){\r\n        //I DONT NEED THIS NOW\r\n        \r\n        this.scene.start('LevelB');\r\n        //create map\r\n        this.map = this.add.tilemap('map');\r\n        let terrain = this.map.addTilesetImage('platformertiles', 'terrain');\r\n        this.skyLayer = this.map.createStaticLayer('Sky', [terrain], 0, 0).setDepth(-2);\r\n        this.bgLayer = this.map.createStaticLayer(\"Background\", [terrain], 0, 0).setDepth(-1);\r\n        this.grLayer = this.map.createStaticLayer('Ground', [terrain], 0, 0).setDepth(0);\r\n    \r\n        //check spawnPoint and hat object\r\n        let spawnPoint = this.map.findObject('Objects', obj => obj.name === 'Spawn Point');\r\n        let hatPoint = this.map.findObject('Objects', obj => obj.name === 'Hat');\r\n        let hat = this.physics.add.image(hatPoint.x, hatPoint.y, 'hat');\r\n    \r\n        //create player\r\n        this.player = new Player(this, spawnPoint.x, spawnPoint.y);\r\n    \r\n    \r\n        //collisions\r\n        this.physics.add.collider(this.player, this.grLayer);\r\n        this.physics.add.collider(hat, this.grLayer);\r\n        this.grLayer.setCollisionByProperty({collides:true});\r\n\r\n        //pick hat\r\n        this.physics.add.overlap(hat, this.player, () => {\r\n            this.player.playerIsWitch = true;\r\n            this.scene.start('LevelB')\r\n        })\r\n    \r\n        //camera\r\n        this.cameras.main.setBounds(0, 0, this.map.widthInPixels, this.map.heightInPixels);\r\n        this.cameras.main.startFollow(this.player);\r\n        this.physics.world.setBounds(0,0,this.map.widthInPixels, this.map.heightInPixels);\r\n\r\n\r\n        //add text from tiled\r\n        let text1 = this.map.findObject('Objects', obj => obj.name === 'Hello');\r\n        console.log(text1);\r\n        \r\n        let text = this.add.text(text1.x, text1.y, text1.text.text, {\r\n            font: 'System',\r\n            fill: '#ffffff'\r\n        });\r\n    }\r\n    \r\n    update(time, delta){\r\n        this.player.update();\r\n        if (this.player.y > this.grLayer.height) {\r\n            this.player.destroy();\r\n            this.scene.restart();\r\n        }\r\n    }\r\n}","/**@type {import(\"../typings/phaser\")} */\r\nimport Player from '../Player.js';\r\n\r\nexport class LevelB extends Phaser.Scene {\r\n    constructor() {\r\n        super({ key: 'LevelB' })\r\n    }\r\n    preload(){\r\n        this.load.tilemapTiledJSON('map2', './assets/maps/level2.json');\r\n        this.load.image('terrain2', './assets/images/witch_tiles.png');\r\n        this.load.image('terrain3', './assets/images/industrial.png');\r\n        this.load.bitmapFont('8bit_font', './assets/fonts/8bit_font.png', './assets/fonts/8bit_font.xml')\r\n    }\r\n    create(){\r\n        \r\n        //I DONT NEED THIS NOW\r\n        this.scene.start('LevelC');\r\n\r\n        //create map\r\n        this.stars_bg = this.add.tileSprite(0, 0, 0, 0, 'stars_bg').setOrigin(0,0).setDepth(-2);\r\n\r\n        this.map = this.add.tilemap('map2');\r\n        let terrain2 = this.map.addTilesetImage('witch_tiles', 'terrain2');\r\n        let terrain3 = this.map.addTilesetImage('industrial', 'terrain3');\r\n        this.grLayer = this.map.createStaticLayer('Ground', [ terrain3, terrain2], 0, 0).setDepth(0);\r\n        this.bgLayer = this.map.createStaticLayer('Background', [terrain3], 0, 0).setDepth(-1);\r\n    \r\n    \r\n        //check spawnPoint\r\n        this.spawnPoint = this.map.findObject('Objects', obj => obj.name === 'Spawn Point');\r\n        \r\n    \r\n        //create player\r\n        this.player = new Player(this, this.spawnPoint.x, this.spawnPoint.y, true); //if last is true - give hat\r\n    \r\n    \r\n        //collisions\r\n        this.physics.add.collider(this.player, this.grLayer);\r\n        this.physics.add.collider(this.player, this.bgLayer);\r\n        this.grLayer.setCollisionByProperty({collides:true});\r\n        this.grLayer.setTileIndexCallback(76, ()=>{console.log('ouch')});\r\n\r\n        //test bullet or sorta\r\n        this.player.on('pointerup', ()=> {\r\n            this.bullet = this.physics.add.sprite(this.player.x, this.player.y, 'ghost', 0);\r\n            this.bullet.body.setAllowGravity(false);\r\n            this.bullet.setVelocityX(300);\r\n        })\r\n\r\n        //add signs\r\n        let sign = this.map.findObject('Objects', obj => obj.name === 'Sign');\r\n        console.log(sign);\r\n\r\n        //set callback  by location (x,y,w,h,func)\r\n        let text = this.add.bitmapText( sign.x-50, sign.y-30, '8bit_font', sign.type);\r\n\r\n        //second sign\r\n        let sign2 = this.map.findObject('Objects', obj => obj.name === 'Sign2');\r\n\r\n        //set callback  by location (x,y,w,h,func)\r\n        let text2 = this.add.bitmapText( sign2.x, sign2.y, '8bit_font', sign2.type);\r\n        \r\n    }\r\n    \r\n    update(time, delta){\r\n        this.player.update();\r\n        if (this.player.y > this.grLayer.height) {\r\n            this.player.destroy();\r\n            this.player = new Player(this, this.spawnPoint.x, this.spawnPoint.y, true);\r\n            \r\n            //collisions\r\n            this.physics.add.collider(this.player, this.grLayer);\r\n            this.physics.add.collider(this.player, this.bgLayer);\r\n            this.grLayer.setCollisionByProperty({collides:true});\r\n        }\r\n    }\r\n}","/**@type {import(\"../typings/phaser\")} */\r\nimport Player from '../Player.js';\r\n\r\nexport class LevelC extends Phaser.Scene {\r\n    constructor() {\r\n        super({ key: 'LevelC' })\r\n    }\r\n    preload(){\r\n        this.load.tilemapTiledJSON('map3', './assets/maps/level3.json');\r\n        this.load.bitmapFont('8bit_font', './assets/fonts/8bit_font.png', './assets/fonts/8bit_font.xml');\r\n        this.load.image('spike', './assets/images/spike.png');\r\n    }\r\n    create(){\r\n        //create map\r\n        this.map = this.add.tilemap('map3');\r\n        let terrain2 = this.map.addTilesetImage('witch_tiles', 'terrain2');\r\n        let terrain3 = this.map.addTilesetImage('industrial', 'terrain3');\r\n        this.grLayer = this.map.createDynamicLayer('Ground', [ terrain3, terrain2], 0, 0).setDepth(0);\r\n        this.bgLayer = this.map.createStaticLayer('Background', [terrain3], 0, 0).setDepth(-1);\r\n\r\n        this.stars_bg = this.add.tileSprite(0, 0, this.map.widthInPixels, 270, 'stars_bg').setOrigin(0,0).setDepth(-2);\r\n    \r\n        //check spawnPoint\r\n        this.spawnPoint = this.map.findObject('Objects', obj => obj.name === 'Spawn Point');\r\n        \r\n    \r\n        //create player\r\n        this.player = new Player(this, this.spawnPoint.x, this.spawnPoint.y, true); //if last is true - give hat\r\n    \r\n    \r\n        //collisions\r\n        this.physics.add.collider(this.player, this.grLayer);\r\n        this.physics.add.collider(this.player, this.bgLayer);\r\n        this.grLayer.setCollisionByProperty({collides:true});\r\n\r\n        //SPIKES\r\n        // Create a physics group - useful for colliding the player against all the spikes\r\n        this.spikeGroup = this.physics.add.staticGroup();\r\n\r\n        // Loop over each Tile and replace spikes (tile index 101) with custom sprites\r\n        this.grLayer.forEachTile(tile => {\r\n            if (tile.index === 101) {\r\n                // A sprite has its origin at the center, so place the sprite at the center of the tile\r\n                const x = tile.getCenterX();\r\n                const y = tile.getCenterY();\r\n                const spike = this.spikeGroup.create(x, y, \"spike\");\r\n\r\n                // The map has spike tiles that have been rotated in Tiled (\"z\" key), so parse out that angle\r\n                // to the correct body placement\r\n                spike.rotation = tile.rotation;\r\n                if (spike.angle === 0) spike.body.setSize(16, 3).setOffset(0, 13);\r\n                else if (spike.angle === -90) spike.body.setSize(3, 16).setOffset(13, 0);\r\n                else if (spike.angle === 90) spike.body.setSize(3, 16).setOffset(0, 0);\r\n\r\n                // And lastly, remove the spike tile from the layer\r\n                this.grLayer.removeTileAt(tile.x, tile.y);\r\n            }\r\n        });\r\n\r\n\r\n\r\n        //test bullet or sorta\r\n        this.player.on('pointerup', ()=> {\r\n            this.bullet = this.physics.add.sprite(this.player.x, this.player.y, 'ghost', 0);\r\n            this.bullet.body.setAllowGravity(false);\r\n            this.bullet.setVelocityX(300);\r\n        })\r\n\r\n\r\n        \r\n    }\r\n    \r\n    update(time, delta){\r\n        this.player.update();\r\n        if (this.player.y > this.grLayer.height || this.physics.world.overlap(this.player, this.spikeGroup)) {\r\n            this.player.destroy();\r\n            this.player = new Player(this, this.spawnPoint.x, this.spawnPoint.y, true);\r\n            \r\n            //collisions\r\n            this.physics.add.collider(this.player, this.grLayer);\r\n            this.physics.add.collider(this.player, this.bgLayer);\r\n            this.grLayer.setCollisionByProperty({collides:true});\r\n        }\r\n    }\r\n}","/**@type {import(\"../typings/phaser\")} */\r\n//import { LoadScene } from './scenes/LoadScene';\r\nimport {MenuScene} from './scenes/MenuScene';\r\nimport {LevelA} from './scenes/LevelA';\r\nimport {LevelB} from './scenes/LevelB';\r\nimport {LevelC} from './scenes/LevelC';\r\n\r\nlet game = new Phaser.Game({\r\n    width: 300,\r\n    height: 256,\r\n    parent: 'witches-can-t-cry',\r\n    scene: [\r\n        //LoadScene,\r\n        MenuScene,\r\n        LevelA,\r\n        LevelB,\r\n        LevelC\r\n    ],\r\n    render: { pixelArt: true},\r\n    physics: {\r\n        default: \"arcade\",\r\n        arcade: {\r\n            gravity: {y: 1000},\r\n            debug: false\r\n        }\r\n    },\r\n    scale: {\r\n        mode: Phaser.Scale.FIT,\r\n        autoCenter: Phaser.Scale.CENTER_BOTH\r\n    }\r\n});\r\n\r\n//for posting on github:\r\n/*\r\ngit init\r\ngit remote add origin https://github.com/Kyle-is-online/(repo-name).git\r\ngit add --all\r\n(login)\r\ngit commit -m 'dist'\r\ngit push -u origin master\r\n\r\n*/\r\n\r\n"]}